// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Uwp.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class Film
    {
        /// <summary>
        /// Initializes a new instance of the Film class.
        /// </summary>
        public Film() { }

        /// <summary>
        /// Initializes a new instance of the Film class.
        /// </summary>
        public Film(string titre, int genreId, int? id = default(int?), DateTime? dateSortie = default(DateTime?), double? note = default(double?), Genre genre = default(Genre))
        {
            Id = id;
            Titre = titre;
            DateSortie = dateSortie;
            Note = note;
            GenreId = genreId;
            Genre = genre;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "titre")]
        public string Titre { get; set; }

        /// <summary>
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "dateSortie")]
        public DateTime? DateSortie { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "note")]
        public double? Note { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "genreId")]
        public int GenreId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "genre")]
        public Genre Genre { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Titre == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Titre");
            }
            if (this.Titre != null)
            {
                if (this.Titre.Length > 80)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Titre", 80);
                }
                if (this.Titre.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Titre", 0);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.Titre, "^[a-zA-Z0-9&\\-'!\\s]*$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Titre", "^[a-zA-Z0-9&\\-'!\\s]*$");
                }
            }
            if (this.Note > 5)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "Note", 5);
            }
            if (this.Note < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "Note", 0);
            }
            if (this.Genre != null)
            {
                this.Genre.Validate();
            }
        }
    }
}
